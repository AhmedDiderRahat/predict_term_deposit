{
  "algorithm": "LOGISTIC_REGRESSION",
  "logit_grid": {
    "multi_class": "ovr",
    "penalty": {
      "values": {
        "l1": {
          "enabled": false
        },
        "l2": {
          "enabled": true
        }
      }
    },
    "C": {
      "gridMode": "EXPLICIT",
      "randomMode": "RANGE",
      "limit": {
        "min": 1.0E-23
      },
      "values": [
        0.01,
        0.1,
        1.0,
        10.0,
        100.0
      ],
      "range": {
        "min": 0.01,
        "max": 100.0,
        "nbValues": 3,
        "scaling": "LOGARITHMIC"
      }
    },
    "n_jobs": 2,
    "enabled": true
  },
  "max_ensemble_nodes_serialized": 0,
  "metrics": {
    "customMetrics": [
      {
        "name": "Custom Metric #1",
        "metricCode": "def score(y_valid, y_pred):\n    \"\"\"\n    Custom scoring function.\n    Must return a float quantifying the estimator prediction quality.\n    - y_valid is a pandas Series\n    - y_pred is a numpy ndarray with shape:\n        - (nb_records,) for regression problems and classification problems\n            where \u0027needs probas\u0027 (see below) is false\n            (for classification, the values are the numeric class indexes)\n        - (nb_records, nb_classes) for classification problems where\n            \u0027needs probas\u0027 is true\n    - [optional] X_valid is a dataframe with shape (nb_records, nb_input_features)\n    - [optional] sample_weight is a numpy ndarray with shape (nb_records,)\n        NB: this option requires a variable set as \"Sample weights\"\n    \"\"\"\n        ",
        "description": "",
        "greaterIsBetter": true,
        "needsProbability": false
      }
    ],
    "evaluationMetric": "ROC_AUC",
    "thresholdOptimizationMetric": "F1",
    "costMatrixWeights": {
      "tpGain": 1.0,
      "tnGain": 0.0,
      "fpGain": -0.3,
      "fnGain": 0.0
    },
    "liftPoint": 0.4,
    "netUpliftPoint": 0.5,
    "causalWeighting": "NO_WEIGHTING"
  },
  "autoOptimizeThreshold": true,
  "forcedClassifierThreshold": 0.0,
  "gridLength": 5,
  "grid_search_params": {
    "mode": "KFOLD",
    "splitRatio": 0.8,
    "shuffleIterations": 1,
    "nFolds": 5,
    "cvSeed": 1337,
    "stratified": true,
    "grouped": false,
    "strategy": "GRID",
    "bayesianOptimizer": "SCIKIT_OPTIMIZE",
    "randomized": true,
    "seed": 1337,
    "nIter": 0,
    "nIterRandom": 5,
    "timeout": 0,
    "nJobs": 4,
    "distributed": true,
    "nContainers": 4,
    "foldOffset": true
  },
  "pluginAlgoCustomGridSearch": false,
  "computeLearningCurves": false,
  "skipExpensiveReports": false,
  "propensityModeling": {
    "enabled": true,
    "calibrateProbabilities": false,
    "calibrationDataRatio": 0.1
  }
}